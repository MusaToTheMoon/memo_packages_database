{
  "fileName": "java.util.HashMap",
  "sourceType": "github",
  "url": "https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/util/HashMap.java",
  "sourceCodeFilePath": "java_source_code_files/java/util/HashMap.java",
  "isSuccess": true,
  "llmModelName": [
    "gemini-2.5-pro",
    "gemini-2.5-pro",
    "gemini-2.5-pro"
  ],
  "llmAnalysisTimestamp": [
    1751895902,
    1751902069,
    1751922485
  ],
  "runName": [
    "gemini-2.5-pro-pass-1",
    "gemini-2.5-pro-pass-2",
    "gemini-2.5-pro-pass-3"
  ],
  "llmResponseTimeSeconds": [
    379.032,
    269.584,
    241.903
  ],
  "llmAnalysis": [
    {
      "methodSignature": "K getKey()",
      "className": "java.util.HashMap.Node",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "V getValue()",
      "className": "java.util.HashMap.Node",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "String toString()",
      "className": "java.util.HashMap.Node",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "int hashCode()",
      "className": "java.util.HashMap.Node",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "V setValue(V newValue)",
      "className": "java.util.HashMap.Node",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "boolean equals(Object o)",
      "className": "java.util.HashMap.Node",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "int hash(Object key)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": true,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "Class<?> comparableClassFor(Object x)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": true,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "int compareComparables(Class<?> kc, Object k, Object x)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": true,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "int tableSizeFor(int cap)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "void putMapEntries(Map<? extends K, ? extends V> m, boolean evict)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "int size()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "boolean isEmpty()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "V get(Object key)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "Node<K,V> getNode(Object key)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "boolean containsKey(Object key)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "V put(K key, V value)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "Node<K,V>[] resize()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "void treeifyBin(Node<K,V>[] tab, int hash)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "void putAll(Map<? extends K, ? extends V> m)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "V remove(Object key)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "Node<K,V> removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "void clear()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "boolean containsValue(Object value)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "Set<K> keySet()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "<T> T[] prepareArray(T[] a)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "<T> T[] keysToArray(T[] a)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "<T> T[] valuesToArray(T[] a)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "Collection<V> values()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "Set<Map.Entry<K,V>> entrySet()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "V getOrDefault(Object key, V defaultValue)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "V putIfAbsent(K key, V value)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "boolean remove(Object key, Object value)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "boolean replace(K key, V oldValue, V newValue)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "V replace(K key, V value)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "V compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "void forEach(BiConsumer<? super K, ? super V> action)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "void replaceAll(BiFunction<? super K, ? super V, ? extends V> function)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "Object clone()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "float loadFactor()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "int capacity()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "void reinitialize()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "void afterNodeAccess(Node<K,V> p)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": true,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "void afterNodeInsertion(boolean evict)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": true,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "void afterNodeRemoval(Node<K,V> p)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": true,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "int calculateHashMapCapacity(int numMappings)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "<K,V> HashMap<K,V> newHashMap(int numMappings)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": true,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "static final int hash(Object key)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": true,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "static Class<?> comparableClassFor(Object x)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": true,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "static int compareComparables(Class<?> kc, Object k, Object x)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": true,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "static final int tableSizeFor(int cap)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "Node<K, V> getNode(Object key)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "Node<K, V>[] resize()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "void treeifyBin(Node<K, V>[] tab, int hash)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "Node<K, V> removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "Set<Map.Entry<K, V>> entrySet()",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "void writeObject(java.io.ObjectOutputStream s)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "void readObject(ObjectInputStream s)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "Node<K, V> newNode(int hash, K key, V value, Node<K, V> next)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "Node<K, V> replacementNode(Node<K, V> p, Node<K, V> next)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "TreeNode<K, V> newTreeNode(int hash, K key, V value, Node<K, V> next)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "TreeNode<K, V> replacementTreeNode(Node<K, V> p, Node<K, V> next)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "void afterNodeAccess(Node<K, V> p)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": true,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "void afterNodeRemoval(Node<K, V> p)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": true,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "void internalWriteEntries(java.io.ObjectOutputStream s)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "static int calculateHashMapCapacity(int numMappings)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": true,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": true
      }
    },
    {
      "methodSignature": "static <K, V> HashMap<K, V> newHashMap(int numMappings)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    },
    {
      "methodSignature": "<K, V> HashMap<K, V> newHashMap(int numMappings)",
      "className": "java.util.HashMap",
      "aggregatedPurityInfo": {
        "aggregatedIsPureLLM": false,
        "aggregatedIsPureStrict": false,
        "aggregatedIsPureWithReads": false
      }
    }
  ]
}